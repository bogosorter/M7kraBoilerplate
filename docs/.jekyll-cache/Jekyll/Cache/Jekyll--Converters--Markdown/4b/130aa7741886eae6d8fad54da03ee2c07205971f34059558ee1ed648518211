I"È3<h1 class="no_toc" id="components">Components</h1>

<h2 class="no_toc" id="table-of-contents">Table of Contents</h2>

<ul id="markdown-toc">
  <li><a href="#app" id="markdown-toc-app"><code class="language-plaintext highlighter-rouge">App</code></a></li>
  <li><a href="#main" id="markdown-toc-main"><code class="language-plaintext highlighter-rouge">Main</code></a></li>
  <li><a href="#settings" id="markdown-toc-settings"><code class="language-plaintext highlighter-rouge">Settings</code></a></li>
  <li><a href="#header" id="markdown-toc-header"><code class="language-plaintext highlighter-rouge">Header</code></a></li>
  <li><a href="#contextmenu" id="markdown-toc-contextmenu"><code class="language-plaintext highlighter-rouge">ContextMenu</code></a></li>
  <li><a href="#logger" id="markdown-toc-logger"><code class="language-plaintext highlighter-rouge">Logger</code></a></li>
  <li><a href="#setting" id="markdown-toc-setting"><code class="language-plaintext highlighter-rouge">Setting</code></a></li>
  <li><a href="#tutorial" id="markdown-toc-tutorial"><code class="language-plaintext highlighter-rouge">Tutorial</code></a></li>
  <li><a href="#button" id="markdown-toc-button"><code class="language-plaintext highlighter-rouge">Button</code></a></li>
  <li><a href="#icons" id="markdown-toc-icons"><code class="language-plaintext highlighter-rouge">Icons</code></a></li>
</ul>

<h2 id="app"><code class="language-plaintext highlighter-rouge">App</code></h2>

<p><strong>Description:</strong> This is the main component. It stores a series of states and renders two other components (<code class="language-plaintext highlighter-rouge">Main</code> and <code class="language-plaintext highlighter-rouge">Settings</code>) according to <code class="language-plaintext highlighter-rouge">view</code>. It also renders a bunch of other components used throughout the app: a <code class="language-plaintext highlighter-rouge">Header</code>, a <code class="language-plaintext highlighter-rouge">ContextMenu</code>, a spinner if <code class="language-plaintext highlighter-rouge">loading</code> and a <code class="language-plaintext highlighter-rouge">Tutorial</code> if <code class="language-plaintext highlighter-rouge">settings.firstTime</code>.</p>

<p><strong>Properties:</strong> None</p>

<p><strong>Hooks:</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">view</span><span class="p">,</span> <span class="nx">setView</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="dl">'</span><span class="s1">main</span><span class="dl">'</span><span class="p">);</span>

<span class="c1">// Variable that stores current settings</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">settings</span><span class="p">,</span> <span class="nx">setSettings</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">({});</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">logs</span><span class="p">,</span> <span class="nx">setLogs</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">();</span>

<span class="c1">// Controlls whether a spinner should be shown</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">loading</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">controller</span> <span class="o">=</span> <span class="nx">useMemo</span><span class="p">(</span>
    <span class="k">new</span> <span class="nx">Controller</span><span class="p">(</span><span class="nx">setView</span><span class="p">,</span> <span class="nx">setSettings</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">,</span> <span class="nx">addLog</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="main"><code class="language-plaintext highlighter-rouge">Main</code></h2>

<p>Displays a generic banner.</p>

<p><strong>Properties:</strong> None</p>

<h2 id="settings"><code class="language-plaintext highlighter-rouge">Settings</code></h2>

<p><strong>Description:</strong> Displays current settings, using the <code class="language-plaintext highlighter-rouge">Setting</code> component, and allows to modify them. The settings <code class="language-plaintext highlighter-rouge">firstTime</code> and <code class="language-plaintext highlighter-rouge">version</code> should not be displayed nor modified, and the new settings should be saved automatically. This component should also allow to reset the settings, reset the library and to go through the tutorial again.</p>

<p><strong>Properties:</strong> <code class="language-plaintext highlighter-rouge">settings</code>, <code class="language-plaintext highlighter-rouge">displayTutorial</code></p>

<h2 id="header"><code class="language-plaintext highlighter-rouge">Header</code></h2>

<p><strong>Description:</strong> Displays the appâ€™s header bar, with app navigation utilities and window buttons. Specifically, people should be able to access <code class="language-plaintext highlighter-rouge">settings</code> if <code class="language-plaintext highlighter-rouge">view == main</code> and go back to the main view otherwise. The normal three window control buttons must be displayed.</p>

<p><strong>Properties:</strong> <code class="language-plaintext highlighter-rouge">view</code></p>

<h2 id="contextmenu"><code class="language-plaintext highlighter-rouge">ContextMenu</code></h2>

<p><strong>Description:</strong> Renders a context menu on a given <code class="language-plaintext highlighter-rouge">position</code>, showing it whenever it is <code class="language-plaintext highlighter-rouge">visible</code>. The same file should also give access to a function, <code class="language-plaintext highlighter-rouge">addContextMenu</code>, which allows to set the states of <code class="language-plaintext highlighter-rouge">ContextMenu</code>. Please note that the component should be designed in such a way that it is called only once. Furthermore, the <code class="language-plaintext highlighter-rouge">items</code> that are passed onto <code class="language-plaintext highlighter-rouge">addContextMenu</code> should be an array dictionaries with entries <code class="language-plaintext highlighter-rouge">text</code> and <code class="language-plaintext highlighter-rouge">onClick</code>.</p>

<p><strong>Properties:</strong> None</p>

<p><strong>Hooks:</strong></p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Which items are to be displayed in the context menu</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">items</span><span class="p">,</span> <span class="nx">setItems</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([]);</span>
<span class="c1">// The coordinates of the context menu</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">position</span><span class="p">,</span> <span class="nx">setPosition</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">({</span><span class="na">x</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span> <span class="na">y</span><span class="p">:</span><span class="mi">0</span><span class="p">});</span>
<span class="c1">// Whether the context menu should be shown</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">visible</span><span class="p">,</span> <span class="nx">setVisibility</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="logger"><code class="language-plaintext highlighter-rouge">Logger</code></h2>

<p><strong>Description:</strong> Displays a list of log messages.</p>

<p><strong>Properties:</strong> <code class="language-plaintext highlighter-rouge">logs</code>, <code class="language-plaintext highlighter-rouge">removeLog</code></p>

<h2 id="setting"><code class="language-plaintext highlighter-rouge">Setting</code></h2>

<p><strong>Description:</strong> Displays a single <code class="language-plaintext highlighter-rouge">setting</code>. In order to modify the setting, <code class="language-plaintext highlighter-rouge">modify</code> should be called. The value to be passed to the function is the entire setting. Here is an example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">setting</span> <span class="o">=</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Theme</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">select</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">options</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">light</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dark</span><span class="dl">'</span><span class="p">],</span>
        <span class="na">value</span><span class="p">:</span> <span class="dl">'</span><span class="s1">dark</span><span class="dl">'</span>
<span class="p">};</span>
<span class="nx">setting</span><span class="p">.</span><span class="nx">selected</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">dark</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">modify</span><span class="p">(</span><span class="nx">setting</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>Properties:</strong> <code class="language-plaintext highlighter-rouge">setting</code>, <code class="language-plaintext highlighter-rouge">modify</code>,</p>

<h2 id="tutorial"><code class="language-plaintext highlighter-rouge">Tutorial</code></h2>

<p><strong>Description:</strong> Renders a brief introductory tutorial, based on a series of slides.</p>

<p><strong>Properties:</strong> <code class="language-plaintext highlighter-rouge">setTutorial</code> (closes the tutorial when called with the argument <code class="language-plaintext highlighter-rouge">false</code>.</p>

<h2 id="button"><code class="language-plaintext highlighter-rouge">Button</code></h2>

<p><strong>Description:</strong> Wrapper component that builds a button around its children. Also sets up a shortcut that for <code class="language-plaintext highlighter-rouge">onClick</code>, which should be removed when the button removed from the DOM.</p>

<p><strong>Properties:</strong> <code class="language-plaintext highlighter-rouge">onClick</code>, <code class="language-plaintext highlighter-rouge">type = box</code> (<code class="language-plaintext highlighter-rouge">box</code> or <code class="language-plaintext highlighter-rouge">nodecor</code> <code class="language-plaintext highlighter-rouge">box</code>) and <code class="language-plaintext highlighter-rouge">shortcuts</code>.</p>

<h2 id="icons"><code class="language-plaintext highlighter-rouge">Icons</code></h2>

<p><strong>Description:</strong>  Rather than a component, this module provides a series of icon components. Each of them accepts a property <code class="language-plaintext highlighter-rouge">size</code> defaulting to 32. The following icons are included: <code class="language-plaintext highlighter-rouge">Logo</code>, <code class="language-plaintext highlighter-rouge">Play</code>, <code class="language-plaintext highlighter-rouge">Pause</code>, <code class="language-plaintext highlighter-rouge">SkipFwd</code>, <code class="language-plaintext highlighter-rouge">SkipBwd</code>, <code class="language-plaintext highlighter-rouge">Settings</code>, <code class="language-plaintext highlighter-rouge">Square</code>, <code class="language-plaintext highlighter-rouge">Plus</code>, <code class="language-plaintext highlighter-rouge">Circle</code>, <code class="language-plaintext highlighter-rouge">CircleOutline</code>, <code class="language-plaintext highlighter-rouge">List</code>, <code class="language-plaintext highlighter-rouge">CD</code>, <code class="language-plaintext highlighter-rouge">Search</code>, <code class="language-plaintext highlighter-rouge">Back</code>, <code class="language-plaintext highlighter-rouge">Queue</code>, <code class="language-plaintext highlighter-rouge">Close</code>, <code class="language-plaintext highlighter-rouge">Collapse</code>, <code class="language-plaintext highlighter-rouge">Edit</code> and <code class="language-plaintext highlighter-rouge">Check</code>.</p>
:ET